{"mappings":"AAGkB,MAAZA,EAAcC,SAASC,eAAe,eACtCC,EAAcF,SAASG,cAAc,yBACrCC,EAAeJ,SAASG,cAAc,0BACtCE,EAAiBL,SAASG,cAAc,4BACxCG,EAAiBN,SAASG,cAAc,4BACxCI,EAAiBP,SAASC,eAAe,mBAE/C,IAAIO,EAWsB,SAAjBC,EAAYC,GACnB,MACMC,EAAiBD,GADH,IAAIE,MAAOC,UAIzBC,EAAOC,KAAKC,MAAML,EAAkB,OACpCM,EAAQF,KAAKC,MAAML,EAAmB,MAAyB,MAC/DO,EAAUH,KAAKC,MAAML,EAAmB,KAAoB,KAC5DQ,EAAUJ,KAAKC,MAAML,EAAmB,IAAc,KAGlCT,EAAdkB,YAAcC,EAAgBP,GAC1CV,EAAagB,YAAcC,EAAgBJ,GAC3CZ,EAAee,YAAcC,EAAgBH,GAC7CZ,EAAec,YAAcC,EAAgBF,GAGzCR,GAAkB,IACpBW,cAAcd,GACAe,I,CAKwC,SAAjDF,EAAgBG,GACvB,OAAOA,EAAQ,GAAK,IAAIA,IAAUA,C,CAsBJ,SAAvBD,IACP,MAAME,EAAe,IAAIb,KAAKL,EAAeiB,OAAOX,UAC9Ca,GAAc,IAAId,MAAOC,UAG+Bd,EAAlD4B,SAAWF,GAAgBC,C,EAIC,WACxC,MAAME,EAAkB,IAAIhB,KACtBiB,EAAOD,EAAgBE,cACvBC,GAASH,EAAgBI,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAChEC,EAAMP,EAAgBQ,UAAUH,WAAWC,SAAS,EAAG,KACvDjB,EAAQW,EAAgBS,WAAWJ,WAAWC,SAAS,EAAG,KAC1DhB,EAAUU,EAAgBU,aAAaL,WAAWC,SAAS,EAAG,KAE9DK,EAAkB,GAAGV,KAAQE,KAASI,KAAOlB,KAASC,IAC5DX,EAAeiB,MAAQe,EACvBhB,G,CA1E8BiB,GAGXjC,EAANkC,iBAAiB,UAAU,KACxClB,GAAyB,IAiCDxB,EAAd0C,iBAAiB,SAAS,KAET,MAArB/B,EAAa,IAAIE,KAAKL,EAAeiB,OAAOX,UAG9C6B,MAAMhC,GACRiC,MAAM,wCAKoBnC,EAARoC,YAAYnC,EAAa,IAAMC,GAGpCX,EAAH4B,UAAW,EAAI","sources":["src/js/02-timer.js"],"sourcesContent":["// js/02-timer.js\n\n// Отримання елементів DOM\nconst startButton = document.getElementById('startButton');\nconst daysElement = document.querySelector('[data-days] .top-line');\nconst hoursElement = document.querySelector('[data-hours] .top-line');\nconst minutesElement = document.querySelector('[data-minutes] .top-line');\nconst secondsElement = document.querySelector('[data-seconds] .top-line');\nconst datetimePicker = document.getElementById('datetime-picker');\n\nlet countdownInterval;\n\n// Встановлення початкових значень для datetimePicker\nsetInitialDatetime();\n\n// Обробник зміни значення datetimePicker\ndatetimePicker.addEventListener('change', () => {\n  updateStartButtonStatus();\n});\n\n// Функція для оновлення таймера\nfunction updateTimer(targetDate) {\n  const currentDate = new Date().getTime();\n  const timeDifference = targetDate - currentDate;\n\n  // Розрахунок днів, годин, хвилин та секунд\n  const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n\n  // Оновлення значень на сторінці\n  daysElement.textContent = formatTimeValue(days);\n  hoursElement.textContent = formatTimeValue(hours);\n  minutesElement.textContent = formatTimeValue(minutes);\n  secondsElement.textContent = formatTimeValue(seconds);\n\n  // Перевірка, чи таймер досягнув нуля\n  if (timeDifference <= 0) {\n    clearInterval(countdownInterval); // Зупинка таймера\n    updateStartButtonStatus();        // Оновлення статусу кнопки \"Start\"\n  }\n}\n\n// Функція для форматування числових значень (додавання 0 перед числами < 10)\nfunction formatTimeValue(value) {\n  return value < 10 ? `0${value}` : value;\n}\n\n// Обробник натискання на кнопку \"Start\"\nstartButton.addEventListener('click', () => {\n  // Отримання введеної дати та часу\n  const targetDate = new Date(datetimePicker.value).getTime();\n\n  // Перевірка, чи введена коректна дата\n  if (isNaN(targetDate)) {\n    alert('Please enter a valid date and time.');\n    return;\n  }\n\n  // Оновлення таймера кожну секунду\n  countdownInterval = setInterval(updateTimer, 1000, targetDate);\n\n  // Вимикаємо кнопку \"Start\"\n  startButton.disabled = true;\n});\n\n// Функція для оновлення статусу кнопки \"Start\"\nfunction updateStartButtonStatus() {\n  const selectedDate = new Date(datetimePicker.value).getTime();\n  const currentDate = new Date().getTime();\n\n  // Активація кнопки \"Start\" лише якщо вибрана дата та час більші за поточну системну\n  startButton.disabled = selectedDate <= currentDate;\n}\n\n// Функція для встановлення початкових значень для datetimePicker\nfunction setInitialDatetime() {\n  const currentDatetime = new Date();\n  const year = currentDatetime.getFullYear();\n  const month = (currentDatetime.getMonth() + 1).toString().padStart(2, '0');\n  const day = currentDatetime.getDate().toString().padStart(2, '0');\n  const hours = currentDatetime.getHours().toString().padStart(2, '0');\n  const minutes = currentDatetime.getMinutes().toString().padStart(2, '0');\n\n  const initialDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;\n  datetimePicker.value = initialDatetime;\n  updateStartButtonStatus(); // Оновлення статусу кнопки \"Start\"\n}\n"],"names":["$40d383fb392a7037$var$startButton","document","getElementById","$40d383fb392a7037$var$daysElement","querySelector","$40d383fb392a7037$var$hoursElement","$40d383fb392a7037$var$minutesElement","$40d383fb392a7037$var$secondsElement","$40d383fb392a7037$var$datetimePicker","$40d383fb392a7037$var$countdownInterval","$40d383fb392a7037$var$updateTimer","targetDate","timeDifference","Date","getTime","days","Math","floor","hours","minutes","seconds","textContent","$40d383fb392a7037$var$formatTimeValue","clearInterval","$40d383fb392a7037$var$updateStartButtonStatus","value","selectedDate","currentDate","disabled","currentDatetime","year","getFullYear","month","getMonth","toString","padStart","day","getDate","getHours","getMinutes","initialDatetime","$40d383fb392a7037$var$setInitialDatetime","addEventListener","isNaN","alert","setInterval"],"version":3,"file":"02-timer.d2738c9f.js.map"}